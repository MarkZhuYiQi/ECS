<?php
/**
 * Created by PhpStorm.
 * User: SZL4ZSY
 * Date: 9/1/2016
 * Time: 11:01 AM
 */

require_once "tplfunc.ctrl";

class _Main{
    public $_viewName="index";  //查询
    public $_objList=array();   //变量数组
    public $cache_time=0;       //0的话就没有缓存处理
    public $isFileCache=false;   //默认是否保存文件缓存
    public $isAdmin=false;      //是否是后台管理

    function authority($userName){
        $m_user=load_model("m_user");
        $m_user->load(" `m_user_userName`='".$userName."' ");
        foreach($m_user->all() as $r){
            $userId=$r;
        }
        $m_roleuser=load_model("m_roleuser");
        $ret=$m_roleuser->_db->ecs_m_roleuser()->select("roleId")->where(" userId=".$userId." ");
        foreach($ret as $r){
             $roleId[]=$r["roleId"];
        }
        $m_role=load_model("m_role");
        $ret=$m_role->_db->ecs_m_role()->select("id,roleName");
        foreach($ret as $r){
            if(in_array($r["id"],$roleId)){
                $permission[]=$r["roleName"];
            }
        }
        return $permission;         //该用户拥有的权限，以数组形式返回
    }

    /**
     * 设置cache是否启用
     * @param int $cacheTime
     */
    function setCacheEnabled($cacheTime=60){
        if($cacheTime>0){
            $this->cache_time=$cacheTime;    //设置缓存时间
        }
    }

    /**
     * 判断缓存是否过期
     * @return bool
     */
    function inCache(){     //缓存是否还存在
        if(get_cache($this->_viewName)){
            return true;
        }
        return false;
    }

    /**
     * @param $objName
     * @param $objValue
     * 添加变量
     */
    function addObject($objName,$objValue){
        $this->_objList[$objName]=$objValue;
    }

    /**
     * @param $vname
     * 设置视图模板名称
     */
    function setViewName($vname){
        //设置view的名称
        $this->_viewName=$vname;
    }


    //执行MVC架构所有事宜
    function run(){

        if($this->cache_time>0){    //代表从缓存中获取内容
            //从缓存中获取变量值
            $getVars=get_cache($this->_viewName);
            if($getVars){
                echo "使用了缓存";
                extract($getVars);   //解包变量值
            }else{
                //将objList数组放到视图模板名称变量下
                set_cache($this->_viewName,$this->_objList,$this->cache_time);
                extract($this->_objList);
            }
        }else{
            extract($this->_objList);
        }

        ob_start();     //打开缓冲区

        $view_path=CURRENT_VIEWPATH;
        if($this->isAdmin)$view_path=CURRENT_VIEWPATH_ADMIN;

        include("MVC/V/".$view_path."/head.tpl"); //加载头模板

        include("MVC/V/".$view_path."/".$this->_viewName.".tpl"); //加载业务模板

        include("MVC/V/".$view_path."/footer.tpl"); //加载尾模板

        $getContent=ob_get_contents();          //获取以上所有内容

        ob_clean();                             //清除缓冲区内容

        if($this->isFileCache){
            //判断文件缓存中是否有该文件
            $fileName=md5($_SERVER["REQUEST_URI"]);
            if(file_exists(CACHE_PATH.$fileName)){
                echo "使用文件缓存";
                echo file_get_contents(CACHE_PATH.$fileName);   //直接加载文件缓存
            }else{
                $getContent=$this->generateTpl($getContent);
                file_put_contents(CACHE_PATH.$fileName,$getContent);
                echo $getContent;
            }
        }else{
            echo $this->generateTpl($getContent);
        }
//        var_dump($_SERVER);     //检测正则匹配apache 情况
    }

    /**
     * @param $getContent
     * @return mixed
     * 解析模板变量
     */
    function generateTpl($getContent){
        $getContent=$this->getInclude($getContent);         //解析include
        $getContent=$this->getForeach($getContent);         //先解析循环
//        var_dump($getContent);
        $getContent=$this->getSimpleVars($getContent);      //然后解析简单变量
        return $getContent;
    }

    /**
     * @param $tplContent
     * @return mixed
     * 用于解析单变量
     * 获取到本来输出到缓冲区的内容，用正则表达式匹配需要的关键字
     * 然后替换成需要的结果值
     */
    function getSimpleVars($tplContent){
//        if(preg_match_all("/{([a-zA-Z]{1,30}?)}/is",$tplContent,$result)) {        //不区分大小写 i，换行符不包含 s
//            $value=$result[1];
//            foreach($value as $v){
//                if(array_key_exists($v,$this->_objList)){
//                    $tplContent=preg_replace("/{".$v."}/is",$this->_objList[$v],$tplContent);
//                }else{
//
//                }
//            }
//        }
//        return $tplContent;
        //实例：：：：用户名：mark {green('username')}
        //[^\{]这个是用来匹配必须以“{”开头的字符串,如果用.*?则只要遇到{就开始取值了

        if(preg_match_all("/\{(?<varObject0>[^\{]*?\(\'(?<varObject1>[\w\.]{1,30})\'\))\}|{(?<varObject2>[\w\.]{1,30}?)}/is",$tplContent,$result)){
            $varObject0=$result["varObject0"];      //如果有函数包含，值为函数包含的变量名，否则为空
            $varObject1=$result["varObject1"];      //如果有函数，值为变量名
            $varObject2=$result["varObject2"];      //如果没有函数，值为变量名
//            var_dump($varObject0);
//            var_dump($varObject1);
//            var_dump($varObject2);
            $result=$result[0];
            foreach ($result as $r){
//                var_dump($r);
                $var0=current($varObject0);     //获得该数组当前指针指向的元素，初始为0
                $var1=current($varObject1);
                $var2=current($varObject2);
                $getVar=$var1==""?$var2:$var1;
//                var_dump($getVar);
                if($getVar=="")$getVar=$var0;
                if("{".$getVar."}"==$r){        //如果直接是一个变量
                    if(array_key_exists($getVar,$this->_objList)){
                        $tplContent=preg_replace("/".$r."/",$this->_objList[$getVar],$tplContent);
                    }
                }else{                          //如果是被函数包围了的变量
                    if(array_key_exists($getVar,$this->_objList)){
                        $newr=str_replace($getVar,$this->_objList[$getVar],$r); //将其中的变量替换掉
                        $newr=str_replace(array("{","}"),"",$newr);             //再将{}大括号去掉
                        eval('$last='.$newr.";");                               //执行函数
                        if($last){
                            $tplContent=str_replace($r,$last,$tplContent);      //将执行的结果替换给原文
                        }
                    }
                }
                $var0=next($varObject0);        //指向指针下移一位
                $var1=next($varObject1);
                $var2=next($varObject2);
            }
            return $tplContent;
        }else{
            return $tplContent;
        }

    }

    function getInclude($tplContent){
        if(preg_match_all("/\{include\s+\"([\w\.]{1,30})\s*\"\}/is",$tplContent,$result)){
            $result=$result[1];
            foreach($result as $r){
                if(file_exists(INCLUDE_PATH.$r)){
                    $getFile=file_get_contents(INCLUDE_PATH.$r);
                    $tplContent=preg_replace("/\{include\s+\"".$r."\s*\"\}/is",$getFile,$tplContent);
                }
            }
        }
        return $tplContent;
    }

    /**
     * @param $replaceContent   需要循环的内容
     * @param $varName          foreach循环中as后面的那个变量
     * @param $row              需要循环的数组在列表中的值
     * @return mixed
     */
    function replaceForeachVars($replaceContent,$varName,$row)
    {
        //替换循环内部内容  red('user.user_name')
        if (preg_match_all("/{(.*?)}/is", $replaceContent, $result)) {
            $result = $result[1];
//            var_dump($result);
            foreach ($result as $r) {
                //根据{}中内容取出变量值，如user.username，匹配出username
                if(!preg_match_all("/".$varName."\.(?<varValue>\w{1,30})/is",$r,$varResult)) continue;
                $varList = $varResult["varValue"];        //取出匹配到的集合,所有varValue匹配到的值
                if (count($varList) == 1 && $varName . "." . $varList[0]==trim($r)) { //这种情况下代表没有函数
                    $varValue = $varList[0];  //没有函数只有变量且只有一个
                    if ($row[$varValue]) {
                        $replaceContent = preg_replace("/{" . $varName . "\." . $varValue . "}/is", $row[$varValue], $replaceContent);
                    }
                } else {        //代表有函数
                    $newr = $r;
                    foreach ($varList as $varValue) {     //有函数的情况下循环里面所有变量
                        if (!$row[$varValue]) continue;
                        $newr = preg_replace("/" . $varName . "\." . $varValue . "/is", $row[$varValue], $newr);

                    }
                    eval('$last=' . $newr . ';');
//                    var_dump($last);
                    if ($last) {
//                        $tplContent = str_replace("{" . $r . "}", $last, $replaceContent);
                        /**
                         * 2016-09-19修改成如下：
                         * 如果每次都用$replaceContent去替换，由于foreach里面不止一个带函数的变量，所以一个foreach中会循环几次
                         * 那么每次只替换$replaceContent中的一项内容并赋给新变量，每次循环赋值一次，最后得到的结果是将最后一个结果替换
                         * 完的结果而不是将所有变量替换完的结果。
                         */
                        $replaceContent = str_replace("{" . $r . "}", $last, $replaceContent);
                    }
                }
            }
        }
        if (isset($replaceContent)) {
            return $replaceContent;
        }
    }
/*
        if(preg_match_all("/{([^{]*?".$varName."\.(?<varValue>[\w]{1,30}).*?)}/is",$replaceContent,$result)) {
            $varValue=$result['varValue'][0];
//            var_dump($result);
            $result=$result[1];
            foreach($result as $v){     //匹配出来的需要循环的详细内容
                if($row[$varValue]){    //从数据库查询结果中寻找到相应的内容
//                    var_dump($replaceContent);
                    if($varName.".".$varValue==trim($v)) {          //如果没有额外的添加一些功能函数
                        $tplContent = preg_replace("/{" . $varName . "\." . $varValue . "}/is", $row[$varValue], $replaceContent);
//                        var_dump($tplContent);
                    }else{          //用户名：{blue('user.user_name')} {username} <br />
                        $newv=preg_replace("/".$varName."\.".$varValue."/is",$row[$varValue],$v);
                        eval('$last='.$newv.";");
//                        var_dump($v);
//                        var_dump($newv);
//                        var_dump($last);
                        if($last){
                            $tplContent=str_replace("{".$v."}",$last,$replaceContent);
                        }
                    }
                }
            }
        }
        if(isset($tplContent)){
            return $tplContent;
        }
    }
*/

    function getForeach($tplContent){
        /**
         * 注意：这里在括号内头部加入?<NAME>相当于给该位置的变量设定了别名，遍历出来可以得知在result中增加了一个以NAME命名的数组
         *      同时原来的数组依然做保留，也就等于说有两个名字不同但是内容完全相同的数组。
         * 为了区别同一页面不同的foreach需要给每个foreach加上唯一标识符
         */
        global $foreach_id;         //外部变量
//        if(preg_match_all("/{foreach\:(?<varObject>[a-zA-Z]{1,30})\s+name=\"(?<varName>[a-zA-Z]{1,30}?)\"}/",$tplContent,$result)){
//            var_dump($result["varObject"]);
//            var_dump($result["varName"]);
//        }
        //逐个替换页面中的标记并做唯一标识符
        $tplContent=preg_replace_callback("/(foreach):([a-zA-Z]{1,30})/is","foreachCallBack",$tplContent);
        //有几个foreach循环就会循环几次
        foreach($foreach_id as $fid){
            //有几个foreach就循环取出几个。找出对应id的foreach
            $pattern="/{foreach\:(?<varObject>[\w]{1,30})\:".$fid."\s+name=\"(?<varName>[\w]{1,30}?)\"}/";
            if(preg_match_all($pattern,$tplContent,$result)){
                $finalResult="";
                $varObject=$result["varObject"][0];     //获得每次需要循环取出的数组
                $varName=$result["varName"][0];         //作为来传递每次的值的变量
                if($this->_objList[$varObject]){       //寻找该数组是否在已被赋值的列表中
                    //取出循环的中间部分
                    $pattern="/{foreach:".$varObject.":".$fid."\s+.*?}(?<replaceContent>.*?){\/foreach}/is";
                    if(preg_match($pattern,$tplContent,$contentResult)){    //
                        $contentResult = $contentResult["replaceContent"];   //取出需要循环的内容
                        foreach ($this->_objList[$varObject] as $row) {       //将列表中的值取出来
                            $tmp = $this->replaceForeachVars($contentResult, $varName, $row);
                            $finalResult .= $tmp;
                        }
                    }
                }
                //替换最终foreach的值
                $tplContent=preg_replace('/{foreach:'.$varObject.':'.$fid.'\s+.*?}.*?{\/foreach}/is',$finalResult,$tplContent);
            }
//            echo $finalResult;
        }
        return $tplContent;
    }

}







$foreach_id=array();        //存放每个foreach的唯一标识符
/**
 * @param $match
 * @return string
 * 该函数是用于给每个foreach添加唯一标示符
 */
function foreachCallBack($match){
//    $id=md5(uniqid());        //这种方案在高并发状态下还是会重复，我觉得还是rand好点
    $id=md5(rand());        //这种方案在高并发状态下还是会重复，我觉得还是rand好点
    global $foreach_id;
    $foreach_id[]=$id;
    return $match[1].":".$match[2].":".$id;
}

